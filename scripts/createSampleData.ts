import { supabase } from '../services/supabaseClient';

export interface CreateSampleDataResult {
  success: boolean;
  message: string;
  details?: string[];
  summary?: {
    subjects: number;
    chapters: number;
    lessons: number;
    questionTypes: number;
  };
}

export const createSampleData = async (): Promise<CreateSampleDataResult> => {
  try {
    console.log('üöÄ Creating sample data...');
    
    // Check if user is authenticated
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      throw new Error('User must be authenticated');
    }

    const details: string[] = [];
    let summary = {
      subjects: 0,
      chapters: 0,
      lessons: 0,
      questionTypes: 0
    };

    // 1. Create subjects
    const subjects = [
      { name: 'To√°n 10', code: 'toan-10', description: 'To√°n h·ªçc l·ªõp 10' },
      { name: 'To√°n 11', code: 'toan-11', description: 'To√°n h·ªçc l·ªõp 11' },
      { name: 'To√°n 12', code: 'toan-12', description: 'To√°n h·ªçc l·ªõp 12' }
    ];

    for (const subjectData of subjects) {
      const { data: existing } = await supabase
        .from('subjects')
        .select('id')
        .eq('code', subjectData.code)
        .single();

      if (!existing) {
        const { error } = await supabase
          .from('subjects')
          .insert(subjectData);
        
        if (error) throw error;
        summary.subjects++;
        details.push(`‚úÖ Created subject: ${subjectData.name}`);
      } else {
        details.push(`‚ÑπÔ∏è Subject already exists: ${subjectData.name}`);
      }
    }

    // 2. Create chapters for To√°n 12
    const { data: toan12 } = await supabase
      .from('subjects')
      .select('id')
      .eq('code', 'toan-12')
      .single();

    if (toan12) {
      const chapters = [
        { 
          subject_id: toan12.id, 
          name: 'Ch∆∞∆°ng 1: ·ª®ng d·ª•ng ƒë·∫°o h√†m', 
          code: 'chuong-1', 
          order_index: 1,
          description: '·ª®ng d·ª•ng ƒë·∫°o h√†m ƒë·ªÉ kh·∫£o s√°t h√†m s·ªë'
        },
        { 
          subject_id: toan12.id, 
          name: 'Ch∆∞∆°ng 2: Nguy√™n h√†m v√† t√≠ch ph√¢n', 
          code: 'chuong-2', 
          order_index: 2,
          description: 'Nguy√™n h√†m, t√≠ch ph√¢n v√† ·ª©ng d·ª•ng'
        }
      ];

      for (const chapterData of chapters) {
        const { data: existing } = await supabase
          .from('chapters')
          .select('id')
          .eq('subject_id', chapterData.subject_id)
          .eq('code', chapterData.code)
          .single();

        if (!existing) {
          const { error } = await supabase
            .from('chapters')
            .insert(chapterData);
          
          if (error) throw error;
          summary.chapters++;
          details.push(`‚úÖ Created chapter: ${chapterData.name}`);
        } else {
          details.push(`‚ÑπÔ∏è Chapter already exists: ${chapterData.name}`);
        }
      }

      // 3. Create lessons for Chapter 1
      const { data: chapter1 } = await supabase
        .from('chapters')
        .select('id')
        .eq('subject_id', toan12.id)
        .eq('code', 'chuong-1')
        .single();

      if (chapter1) {
        const lessons = [
          {
            chapter_id: chapter1.id,
            name: 'B√†i 1: S·ª± ƒë·ªìng bi·∫øn, ngh·ªãch bi·∫øn',
            code: 'bai-1',
            order_index: 1,
            description: 'X√©t t√≠nh ƒë∆°n ƒëi·ªáu c·ªßa h√†m s·ªë'
          },
          {
            chapter_id: chapter1.id,
            name: 'B√†i 2: C·ª±c tr·ªã c·ªßa h√†m s·ªë',
            code: 'bai-2',
            order_index: 2,
            description: 'T√¨m c·ª±c ƒë·∫°i, c·ª±c ti·ªÉu c·ªßa h√†m s·ªë'
          },
          {
            chapter_id: chapter1.id,
            name: 'B√†i 3: GTLN, GTNN',
            code: 'bai-3',
            order_index: 3,
            description: 'Gi√° tr·ªã l·ªõn nh·∫•t, nh·ªè nh·∫•t c·ªßa h√†m s·ªë'
          }
        ];

        for (const lessonData of lessons) {
          const { data: existing } = await supabase
            .from('lessons')
            .select('id')
            .eq('chapter_id', lessonData.chapter_id)
            .eq('code', lessonData.code)
            .single();

          if (!existing) {
            const { error } = await supabase
              .from('lessons')
              .insert(lessonData);
            
            if (error) throw error;
            summary.lessons++;
            details.push(`‚úÖ Created lesson: ${lessonData.name}`);
          } else {
            details.push(`‚ÑπÔ∏è Lesson already exists: ${lessonData.name}`);
          }
        }

        // 4. Create question types for B√†i 1
        const { data: lesson1 } = await supabase
          .from('lessons')
          .select('id')
          .eq('chapter_id', chapter1.id)
          .eq('code', 'bai-1')
          .single();

        if (lesson1) {
          const questionTypes = [
            {
              lesson_id: lesson1.id,
              name: 'D·∫°ng 1: X√©t t√≠nh ƒë∆°n ƒëi·ªáu',
              code: 'dang-1',
              order_index: 1,
              description: 'X√©t t√≠nh ƒë·ªìng bi·∫øn, ngh·ªãch bi·∫øn c·ªßa h√†m s·ªë',
              difficulty_level: 'medium'
            },
            {
              lesson_id: lesson1.id,
              name: 'D·∫°ng 2: T√¨m kho·∫£ng ƒë∆°n ƒëi·ªáu',
              code: 'dang-2',
              order_index: 2,
              description: 'T√¨m kho·∫£ng ƒë·ªìng bi·∫øn, ngh·ªãch bi·∫øn',
              difficulty_level: 'medium'
            },
            {
              lesson_id: lesson1.id,
              name: 'D·∫°ng 3: Tham s·ªë m',
              code: 'dang-3',
              order_index: 3,
              description: 'B√†i to√°n c√≥ tham s·ªë v·ªÅ t√≠nh ƒë∆°n ƒëi·ªáu',
              difficulty_level: 'hard'
            }
          ];

          for (const questionTypeData of questionTypes) {
            const { data: existing } = await supabase
              .from('question_types')
              .select('id')
              .eq('lesson_id', questionTypeData.lesson_id)
              .eq('code', questionTypeData.code)
              .single();

            if (!existing) {
              const { error } = await supabase
                .from('question_types')
                .insert(questionTypeData);
              
              if (error) throw error;
              summary.questionTypes++;
              details.push(`‚úÖ Created question type: ${questionTypeData.name}`);
            } else {
              details.push(`‚ÑπÔ∏è Question type already exists: ${questionTypeData.name}`);
            }
          }
        }
      }
    }

    console.log('‚úÖ Sample data creation completed!');
    console.log('üìä Summary:', summary);

    return {
      success: true,
      message: `T·∫°o d·ªØ li·ªáu m·∫´u th√†nh c√¥ng! ƒê√£ t·∫°o ${summary.subjects} m√¥n h·ªçc, ${summary.chapters} ch∆∞∆°ng, ${summary.lessons} b√†i h·ªçc, ${summary.questionTypes} d·∫°ng c√¢u h·ªèi.`,
      details,
      summary
    };

  } catch (error) {
    console.error('‚ùå Sample data creation failed:', error);
    return {
      success: false,
      message: `T·∫°o d·ªØ li·ªáu m·∫´u th·∫•t b·∫°i: ${error instanceof Error ? error.message : 'Unknown error'}`,
      details: [`Error: ${error instanceof Error ? error.message : 'Unknown error'}`]
    };
  }
};

// For browser console usage
if (typeof window !== 'undefined') {
  (window as any).createSampleData = createSampleData;
}