import React, { useState } from 'react';
import { AdminService } from '../../services/adminService';

const QuickAddForm: React.FC = () => {
  const [formData, setFormData] = useState({
    subjectName: '',
    subjectCode: '',
    chapterName: '',
    chapterCode: '',
    lessonName: '',
    lessonCode: '',
    questionTypeName: '',
    questionTypeCode: '',
    difficulty: 'easy' as 'easy' | 'medium' | 'hard'
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      // 1. T·∫°o m√¥n h·ªçc
      const subject = await AdminService.createSubject({
        name: formData.subjectName,
        code: formData.subjectCode,
        description: `M√¥n ${formData.subjectName}`
      });

      // 2. T·∫°o ch∆∞∆°ng
      const chapter = await AdminService.createChapter({
        subject_id: subject.id,
        name: formData.chapterName,
        code: formData.chapterCode,
        order_index: 1,
        description: `Ch∆∞∆°ng ${formData.chapterName}`
      });

      // 3. T·∫°o b√†i h·ªçc
      const lesson = await AdminService.createLesson({
        chapter_id: chapter.id,
        name: formData.lessonName,
        code: formData.lessonCode,
        order_index: 1,
        description: `B√†i ${formData.lessonName}`
      });

      // 4. T·∫°o d·∫°ng b√†i
      const questionType = await AdminService.createQuestionType({
        lesson_id: lesson.id,
        name: formData.questionTypeName,
        code: formData.questionTypeCode,
        order_index: 1,
        description: `D·∫°ng ${formData.questionTypeName}`,
        difficulty_level: formData.difficulty
      });

      alert(`T·∫°o th√†nh c√¥ng!\nPath: ${formData.subjectCode}-${formData.chapterCode}-${formData.lessonCode}-${formData.questionTypeCode}`);
      
      // Reset form
      setFormData({
        subjectName: '',
        subjectCode: '',
        chapterName: '',
        chapterCode: '',
        lessonName: '',
        lessonCode: '',
        questionTypeName: '',
        questionTypeCode: '',
        difficulty: 'easy'
      });

    } catch (error) {
      console.error('Error creating structure:', error);
      alert('C√≥ l·ªói x·∫£y ra: ' + error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="bg-white shadow rounded-lg p-6">
      <h2 className="text-xl font-semibold mb-6">üöÄ T·∫°o nhanh c·∫•u tr√∫c ho√†n ch·ªânh</h2>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* M√¥n h·ªçc */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              T√™n m√¥n h·ªçc
            </label>
            <input
              type="text"
              value={formData.subjectName}
              onChange={(e) => setFormData(prev => ({ ...prev, subjectName: e.target.value }))}
              placeholder="V√≠ d·ª•: To√°n h·ªçc"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              M√£ m√¥n h·ªçc
            </label>
            <input
              type="text"
              value={formData.subjectCode}
              onChange={(e) => setFormData(prev => ({ ...prev, subjectCode: e.target.value.toUpperCase() }))}
              placeholder="V√≠ d·ª•: TOAN"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
        </div>

        {/* Ch∆∞∆°ng */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              T√™n ch∆∞∆°ng
            </label>
            <input
              type="text"
              value={formData.chapterName}
              onChange={(e) => setFormData(prev => ({ ...prev, chapterName: e.target.value }))}
              placeholder="V√≠ d·ª•: ƒê·∫°i s·ªë"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              M√£ ch∆∞∆°ng
            </label>
            <input
              type="text"
              value={formData.chapterCode}
              onChange={(e) => setFormData(prev => ({ ...prev, chapterCode: e.target.value.toUpperCase() }))}
              placeholder="V√≠ d·ª•: DAI-SO"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
        </div>

        {/* B√†i h·ªçc */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              T√™n b√†i h·ªçc
            </label>
            <input
              type="text"
              value={formData.lessonName}
              onChange={(e) => setFormData(prev => ({ ...prev, lessonName: e.target.value }))}
              placeholder="V√≠ d·ª•: Ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              M√£ b√†i h·ªçc
            </label>
            <input
              type="text"
              value={formData.lessonCode}
              onChange={(e) => setFormData(prev => ({ ...prev, lessonCode: e.target.value.toUpperCase() }))}
              placeholder="V√≠ d·ª•: BAI1"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
        </div>

        {/* D·∫°ng b√†i */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              T√™n d·∫°ng b√†i
            </label>
            <input
              type="text"
              value={formData.questionTypeName}
              onChange={(e) => setFormData(prev => ({ ...prev, questionTypeName: e.target.value }))}
              placeholder="V√≠ d·ª•: Gi·∫£i ph∆∞∆°ng tr√¨nh c∆° b·∫£n"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              M√£ d·∫°ng b√†i
            </label>
            <input
              type="text"
              value={formData.questionTypeCode}
              onChange={(e) => setFormData(prev => ({ ...prev, questionTypeCode: e.target.value.toUpperCase() }))}
              placeholder="V√≠ d·ª•: DANG1"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ƒê·ªô kh√≥
            </label>
            <select
              value={formData.difficulty}
              onChange={(e) => setFormData(prev => ({ ...prev, difficulty: e.target.value as any }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="easy">D·ªÖ</option>
              <option value="medium">Trung b√¨nh</option>
              <option value="hard">Kh√≥</option>
            </select>
          </div>
        </div>

        {/* Preview */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="font-medium text-gray-900 mb-2">Preview Path:</h3>
          <code className="text-sm text-indigo-600">
            {formData.subjectCode}-{formData.chapterCode}-{formData.lessonCode}-{formData.questionTypeCode}
          </code>
        </div>

        {/* Submit */}
        <div className="flex justify-end gap-3">
          <button
            type="submit"
            disabled={loading}
            className="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 disabled:bg-gray-400"
          >
            {loading ? 'ƒêang t·∫°o...' : 'üöÄ T·∫°o c·∫•u tr√∫c'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default QuickAddForm;